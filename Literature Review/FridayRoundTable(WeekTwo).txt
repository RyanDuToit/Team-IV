1) Your candidate(s) algorithm and the selected one(s)

2) the evaluation methods used in the papers you read (i.e., did they use simulation, real implementation, or analytical methods)

3) the metrics used in the papers you read: does the research community use a common set of metrics?

4) Family/category of your algorithms



Fuzzy Logic EPF
-2 layered fuzzy logic interface engine.
-Real-time mobile robot navigation (2D)

First layer performs sensor fusion from sensor readings into a fuzzy variable, collision.
	provides info about possible collisions in four directions front back left and right
Second layer guarantees collision avoidance with dynamic obstacles while following a trajectory generated by electrostatic potential field

SO EPF is the path planner, with 2 layered FL engine to plan, replay, execute a collision free path in real time.

EPF/FL is planned AND reactive behavior

Given a 2-D environment (with initial information from potentially existing environment a priori maps and on-line sonar sensor data), the EPF plans the initial trajectory and starts executing it via the motion control module (see Fig. 1). Once the object detection module (working in parallel with the EPF) detects through sensor readings a “high collision possibility,” it forces the mo- tion control module to “forget” the initial EPF path, take corrective ac- tions in terms of robot steering and robot speed to avoid the collision until new sensor readings dictate a "low" or "not-possible" collision possibility (FL-reactive).
Fuzzy navigation in dynamic environments follow either a classical paradigm or behavior-based paradigm
EPF -> occupancy map -> resistor network
goal-driven navigation generates in real-time minimum occupancy trajectories

FL - provides comprehensive sensor fusion approach to interpret potential field results "in light of the current local environment situation"

obstacle detection module outputs the position and degree of possibility which a collision may occur
	this info is combined in motion control module with the path planner output.
	if obstacle blocks path, C.A. decision that affects heading/speed is taken.

FL -> layer one -> sensor_direction and sensor_direction, which has front/left/right/back (fuzzy variables)
each of the collision values is represented as a fuzzy variable with values not_possible, possible, and high
done with any obstacle


Rules:

Ways we could improve it : 
	limit EPF to 45 degree turn limit
Ways it sucks: 
	it may curve around other planes when not necessary



