1) Your candidate(s) algorithm and the selected one(s)

2) the evaluation methods used in the papers you read (i.e., did they use simulation, real implementation, or analytical methods)

3) the metrics used in the papers you read: does the research community use a common set of metrics?

centralized vs decentralized etc


4) Family/category of your algorithms




A fuzzy logic approach for controlling an autonomous mobile robot (AMR), the Nomad 200, is outlined in Autonomous Vehicle Navigation Utilizing Electrostatic Potential Fields and Fuzzy Logic by Tsourveloudis et al. A 2 layered fuzzy logic (FL) interface combined with an electrostatic potential field path planner (EPF) provided real-time mobile robot navigation in a 2-D dynamic environment. The first layer of fuzzy logic provided a sensor fusion system to fuzzify several sonar sensors returning two fuzzy variables, direction and distance in four directions, front, back, left, and right. The second layer provides an obstacle detection module that outputs the position and degree of possibility which a collision may occur. This information is combined in motion control module with the path planner output.  If an obstacle blocks the pre-planned EPF path, collision avoidance decisions that affect heading and speed are taken.

The EPF/FL approach combines planned and reactive behavior into one algorithm. The EPF path planner reacts slowly to unknown moving obstacles. Combining EPF/FL approach allowed EPF to plan the path and allowed the fuzzy inference to implement the path while avoiding collision with all obstacles. Some discussion was given into tuning membership function. No analytical method guarantees optimal selection for the Mamdani-type inference FL systems. Several approaches were noted that use neural nets, genetic algorithms, neuro-fuzzy methods to fine-tune membership functions.

Several advantages of EPF over other potential field solutions were concluded. Collision free paths generated by the EPF method necessarily lead the goal and local minima are not generated within the field and stagnation points within the field do not exist. The EPF generates an optimal minimum occupancy path toward the goal.
There are several limitations of this research to our application. First, many of the obstacles in this research are static, which is not applicable to UAV research. Dynamic obstacles are not "friendly" or following the same EPF/FL algorithm as the AMR, which could possibly increase efficiency. The AMR also does not travel at such high speeds as the UAVs. The AMR can vary speed or stop completely as well as turn in 360 degrees.
Effectiveness was measured by monitoring distance to target over time and efficiency was measure by time taken to complete path.
EPF/FL approach finished first 80 percent of tests
EPF approach finished first 10 percent
	don't know why it doesn't add to 100?????












EFP/FL approach may be en- hanced through the addition of one more input which is the derivative of the change of the setpoint. This makes the inference resemble a proportional-derivative PD-type controller and may allow the EPF setpoints to be attained faster with a resulting smoother path.
doesn't "interact" with obstacles in any way

Ways we could improve it : 
	limit EPF to 45 degree turn limit
Ways it sucks: 
	it may curve around other planes when not necessary



First layer performs sensor fusion from sensor readings into a fuzzy variable, collision.
	provides info about possible collisions in four directions front back left and right
Second layer guarantees collision avoidance with dynamic obstacles while following a trajectory generated by electrostatic potential field

SO EPF is the path planner, with 2 layered FL engine to plan, replay, execute a collision free path in real time.

EPF/FL is planned AND reactive behavior

Given a 2-D environment (with initial information from potentially existing environment a priori maps and on-line sonar sensor data), the EPF plans the initial trajectory and starts executing it via the motion control module (see Fig. 1). Once the object detection module (working in parallel with the EPF) detects through sensor readings a “high collision possibility,” it forces the motion control module to “forget” the initial EPF path, take corrective actions in terms of robot steering and robot speed to avoid the collision until new sensor readings dictate a "low" or "not-possible" collision possibility (FL-reactive).
Fuzzy navigation in dynamic environments follow either a classical paradigm or behavior-based paradigm
EPF -> occupancy map -> resistor network
goal-driven navigation generates in real-time minimum occupancy trajectories

FL - provides comprehensive sensor fusion approach to interpret potential field results "in light of the current local environment situation"

obstacle detection module outputs the position and degree of possibility which a collision may occur
	this info is combined in motion control module with the path planner output.
	if obstacle blocks path, C.A. decision that affects heading/speed is taken.

FL -> layer one -> sensor_direction and sensor_direction, which has front/left/right/back (fuzzy variables)
each of the collision values is represented as a fuzzy variable with values not_possible, possible, and high
done with any obstacle


Rules: see paper

Results: bypassed MatLab's FL toolbox GUI and greatly increased simulation processing speed.

Discussion:
the EPF path planner was sometimes very slow to react to the presence of unknown moving obstacles. The combined EPF/FL approach allowed the potential field to plan the paths and allowed the fuzzy inference to implement the paths while avoiding collision with all obstacles. The combined EPF/FL ap- proach benefits from the advantages of both approaches.
EPF/FL approach finished first 80 percent of tests
EPF approach finished first 10 percent
	don't know why it doesn't add to 100?????

EFP/FL approach may be en- hanced through the addition of one more input which is the derivative of the change of the setpoint. This makes the inference resemble a proportional-derivative PD-type controller and may allow the EPF setpoints to be attained faster with a resulting smoother path.


doesn't "interact" with obstacles in any way

Ways we could improve it : 
	limit EPF to 45 degree turn limit
Ways it sucks: 
	it may curve around other planes when not necessary



