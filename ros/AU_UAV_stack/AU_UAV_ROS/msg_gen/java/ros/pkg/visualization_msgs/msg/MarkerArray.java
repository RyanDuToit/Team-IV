/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/visualization_msgs/msg/MarkerArray.msg */

package ros.pkg.visualization_msgs.msg;

import java.nio.ByteBuffer;

public class MarkerArray extends ros.communication.Message {

  public java.util.ArrayList<ros.pkg.visualization_msgs.msg.Marker> markers = new java.util.ArrayList<ros.pkg.visualization_msgs.msg.Marker>();

  public MarkerArray() {
  }

  public static java.lang.String __s_getDataType() { return "visualization_msgs/MarkerArray"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "90da67007c26525f655c1c269094e39f"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "Marker[] markers\n" +
"\n" +
"================================================================================\n" +
"MSG: visualization_msgs/Marker\n" +
"# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n" +
"\n" +
"uint8 ARROW=0\n" +
"uint8 CUBE=1\n" +
"uint8 SPHERE=2\n" +
"uint8 CYLINDER=3\n" +
"uint8 LINE_STRIP=4\n" +
"uint8 LINE_LIST=5\n" +
"uint8 CUBE_LIST=6\n" +
"uint8 SPHERE_LIST=7\n" +
"uint8 POINTS=8\n" +
"uint8 TEXT_VIEW_FACING=9\n" +
"uint8 MESH_RESOURCE=10\n" +
"uint8 TRIANGLE_LIST=11\n" +
"\n" +
"uint8 ADD=0\n" +
"uint8 MODIFY=0\n" +
"uint8 DELETE=2\n" +
"\n" +
"Header header                        # header for time/frame information\n" +
"string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\n" +
"int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\n" +
"int32 type 		                       # Type of object\n" +
"int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object\n" +
"geometry_msgs/Pose pose                 # Pose of the object\n" +
"geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\n" +
"std_msgs/ColorRGBA color             # Color [0.0-1.0]\n" +
"duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\n" +
"bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n" +
"\n" +
"#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n" +
"geometry_msgs/Point[] points\n" +
"#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n" +
"#number of colors must either be 0 or equal to the number of points\n" +
"#NOTE: alpha is not yet used\n" +
"std_msgs/ColorRGBA[] colors\n" +
"\n" +
"# NOTE: only used for text markers\n" +
"string text\n" +
"\n" +
"# NOTE: only used for MESH_RESOURCE markers\n" +
"string mesh_resource\n" +
"bool mesh_use_embedded_materials\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Pose\n" +
"# A representation of pose in free space, composed of postion and orientation. \n" +
"Point position\n" +
"Quaternion orientation\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Point\n" +
"# This contains the position of a point in free space\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Quaternion\n" +
"# This represents an orientation in free space in quaternion form.\n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"float64 w\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Vector3\n" +
"# This represents a vector in free space. \n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"================================================================================\n" +
"MSG: std_msgs/ColorRGBA\n" +
"float32 r\n" +
"float32 g\n" +
"float32 b\n" +
"float32 a\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public MarkerArray clone() {
    MarkerArray c = new MarkerArray();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 4;
    for(ros.pkg.visualization_msgs.msg.Marker val : markers) {
      __l += val.serializationLength();
    }
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    bb.putInt(markers.size());
    for(ros.pkg.visualization_msgs.msg.Marker val : markers) {
      val.serialize(bb, seq);
    }
  }

  public void deserialize(ByteBuffer bb) {

    int __markers_len = bb.getInt();
    markers = new java.util.ArrayList<ros.pkg.visualization_msgs.msg.Marker>(__markers_len);
    for(int __i=0; __i<__markers_len; __i++) {
      ros.pkg.visualization_msgs.msg.Marker __tmp = new ros.pkg.visualization_msgs.msg.Marker();
      __tmp.deserialize(bb);
      markers.add(__tmp);;
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof MarkerArray))
      return false;
    MarkerArray other = (MarkerArray) o;
    return
      markers.equals(other.markers) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.markers == null ? 0 : this.markers.hashCode());
    return result;
  }
} // class MarkerArray

