/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/visualization_msgs/msg/ImageMarker.msg */

package ros.pkg.visualization_msgs.msg;

import java.nio.ByteBuffer;

public class ImageMarker extends ros.communication.Message {
  static public final short CIRCLE = 0;
  static public final short LINE_STRIP = 1;
  static public final short LINE_LIST = 2;
  static public final short POLYGON = 3;
  static public final short POINTS = 4;
  static public final short ADD = 0;
  static public final short REMOVE = 1;

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public java.lang.String ns = new java.lang.String();
  public int id;
  public int type;
  public int action;
  public ros.pkg.geometry_msgs.msg.Point position = new ros.pkg.geometry_msgs.msg.Point();
  public float scale;
  public ros.pkg.std_msgs.msg.ColorRGBA outline_color = new ros.pkg.std_msgs.msg.ColorRGBA();
  public short filled;
  public ros.pkg.std_msgs.msg.ColorRGBA fill_color = new ros.pkg.std_msgs.msg.ColorRGBA();
  public ros.communication.Duration lifetime = new ros.communication.Duration();
  public java.util.ArrayList<ros.pkg.geometry_msgs.msg.Point> points = new java.util.ArrayList<ros.pkg.geometry_msgs.msg.Point>();
  public java.util.ArrayList<ros.pkg.std_msgs.msg.ColorRGBA> outline_colors = new java.util.ArrayList<ros.pkg.std_msgs.msg.ColorRGBA>();

  public ImageMarker() {
  }

  public static java.lang.String __s_getDataType() { return "visualization_msgs/ImageMarker"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "1de93c67ec8858b831025a08fbf1b35c"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "uint8 CIRCLE=0\n" +
"uint8 LINE_STRIP=1\n" +
"uint8 LINE_LIST=2\n" +
"uint8 POLYGON=3\n" +
"uint8 POINTS=4\n" +
"\n" +
"uint8 ADD=0\n" +
"uint8 REMOVE=1\n" +
"\n" +
"Header header\n" +
"string ns		# namespace, used with id to form a unique id\n" +
"int32 id          	# unique id within the namespace\n" +
"int32 type        	# CIRCLE/LINE_STRIP/etc.\n" +
"int32 action      	# ADD/REMOVE\n" +
"geometry_msgs/Point position # 2D, in pixel-coords\n" +
"float32 scale	 	# the diameter for a circle, etc.\n" +
"std_msgs/ColorRGBA outline_color\n" +
"uint8 filled		# whether to fill in the shape with color\n" +
"std_msgs/ColorRGBA fill_color # color [0.0-1.0]\n" +
"duration lifetime       # How long the object should last before being automatically deleted.  0 means forever\n" +
"\n" +
"\n" +
"geometry_msgs/Point[] points # used for LINE_STRIP/LINE_LIST/POINTS/etc., 2D in pixel coords\n" +
"std_msgs/ColorRGBA[] outline_colors # a color for each line, point, etc.\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Point\n" +
"# This contains the position of a point in free space\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/ColorRGBA\n" +
"float32 r\n" +
"float32 g\n" +
"float32 b\n" +
"float32 a\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public ImageMarker clone() {
    ImageMarker c = new ImageMarker();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 4 + ns.length();
    __l += 4; // id
    __l += 4; // type
    __l += 4; // action
    __l += position.serializationLength();
    __l += 4; // scale
    __l += outline_color.serializationLength();
    __l += 1; // filled
    __l += fill_color.serializationLength();
    __l += 8; // lifetime
    __l += 4;
    for(ros.pkg.geometry_msgs.msg.Point val : points) {
      __l += val.serializationLength();
    }
    __l += 4;
    for(ros.pkg.std_msgs.msg.ColorRGBA val : outline_colors) {
      __l += val.serializationLength();
    }
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    Serialization.writeString(bb, ns);
    bb.putInt(id);
    bb.putInt(type);
    bb.putInt(action);
    position.serialize(bb, seq);
    bb.putFloat(scale);
    outline_color.serialize(bb, seq);
    bb.put((byte)filled);
    fill_color.serialize(bb, seq);
    Serialization.writeDuration(bb, lifetime);
    bb.putInt(points.size());
    for(ros.pkg.geometry_msgs.msg.Point val : points) {
      val.serialize(bb, seq);
    }
    bb.putInt(outline_colors.size());
    for(ros.pkg.std_msgs.msg.ColorRGBA val : outline_colors) {
      val.serialize(bb, seq);
    }
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    ns = Serialization.readString(bb);
    id = bb.getInt();
    type = bb.getInt();
    action = bb.getInt();
    position.deserialize(bb);
    scale = bb.getFloat();
    outline_color.deserialize(bb);
    filled = (short)(bb.get() & 0xff);
    fill_color.deserialize(bb);
    lifetime = Serialization.readDuration(bb);

    int __points_len = bb.getInt();
    points = new java.util.ArrayList<ros.pkg.geometry_msgs.msg.Point>(__points_len);
    for(int __i=0; __i<__points_len; __i++) {
      ros.pkg.geometry_msgs.msg.Point __tmp = new ros.pkg.geometry_msgs.msg.Point();
      __tmp.deserialize(bb);
      points.add(__tmp);;
    }

    int __outline_colors_len = bb.getInt();
    outline_colors = new java.util.ArrayList<ros.pkg.std_msgs.msg.ColorRGBA>(__outline_colors_len);
    for(int __i=0; __i<__outline_colors_len; __i++) {
      ros.pkg.std_msgs.msg.ColorRGBA __tmp = new ros.pkg.std_msgs.msg.ColorRGBA();
      __tmp.deserialize(bb);
      outline_colors.add(__tmp);;
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof ImageMarker))
      return false;
    ImageMarker other = (ImageMarker) o;
    return
      header.equals(other.header) &&
      ns.equals(other.ns) &&
      id == other.id &&
      type == other.type &&
      action == other.action &&
      position.equals(other.position) &&
      scale == other.scale &&
      outline_color.equals(other.outline_color) &&
      filled == other.filled &&
      fill_color.equals(other.fill_color) &&
      lifetime.equals(other.lifetime) &&
      points.equals(other.points) &&
      outline_colors.equals(other.outline_colors) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (this.ns == null ? 0 : this.ns.hashCode());
    result = prime * result + this.id;
    result = prime * result + this.type;
    result = prime * result + this.action;
    result = prime * result + (this.position == null ? 0 : this.position.hashCode());
    result = prime * result + Float.floatToIntBits(this.scale);
    result = prime * result + (this.outline_color == null ? 0 : this.outline_color.hashCode());
    result = prime * result + this.filled;
    result = prime * result + (this.fill_color == null ? 0 : this.fill_color.hashCode());
    result = prime * result + (this.lifetime == null ? 0 : this.lifetime.hashCode());
    result = prime * result + (this.points == null ? 0 : this.points.hashCode());
    result = prime * result + (this.outline_colors == null ? 0 : this.outline_colors.hashCode());
    return result;
  }
} // class ImageMarker

