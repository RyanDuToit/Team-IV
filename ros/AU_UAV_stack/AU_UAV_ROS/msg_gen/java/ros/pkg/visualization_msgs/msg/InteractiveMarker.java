/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/visualization_msgs/msg/InteractiveMarker.msg */

package ros.pkg.visualization_msgs.msg;

import java.nio.ByteBuffer;

public class InteractiveMarker extends ros.communication.Message {

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public ros.pkg.geometry_msgs.msg.Pose pose = new ros.pkg.geometry_msgs.msg.Pose();
  public java.lang.String name = new java.lang.String();
  public java.lang.String description = new java.lang.String();
  public float scale;
  public java.util.ArrayList<ros.pkg.visualization_msgs.msg.MenuEntry> menu_entries = new java.util.ArrayList<ros.pkg.visualization_msgs.msg.MenuEntry>();
  public java.util.ArrayList<ros.pkg.visualization_msgs.msg.InteractiveMarkerControl> controls = new java.util.ArrayList<ros.pkg.visualization_msgs.msg.InteractiveMarkerControl>();

  public InteractiveMarker() {
  }

  public static java.lang.String __s_getDataType() { return "visualization_msgs/InteractiveMarker"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "97d10a9c6371692b469f5814d4156b68"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# Time/frame info.\n" +
"# If header.time is set to 0, the marker will be retransformed into\n" +
"# its frame on each timestep. You will receive the pose feedback\n" +
"# in the same frame.\n" +
"# Otherwise, you might receive feedback in a different frame.\n" +
"# For rviz, this will be the current 'fixed frame' set by the user.\n" +
"Header header\n" +
"\n" +
"# Initial pose. Also, defines the pivot point for rotations.\n" +
"geometry_msgs/Pose pose\n" +
"\n" +
"# Identifying string. Must be globally unique in\n" +
"# the topic that this message is sent through.\n" +
"string name\n" +
"\n" +
"# Short description (< 40 characters).\n" +
"string description\n" +
"\n" +
"# Scale to be used for default controls (default=1).\n" +
"float32 scale\n" +
"\n" +
"# All menu and submenu entries associated with this marker.\n" +
"MenuEntry[] menu_entries\n" +
"\n" +
"# List of controls displayed for this marker.\n" +
"InteractiveMarkerControl[] controls\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Pose\n" +
"# A representation of pose in free space, composed of postion and orientation. \n" +
"Point position\n" +
"Quaternion orientation\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Point\n" +
"# This contains the position of a point in free space\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Quaternion\n" +
"# This represents an orientation in free space in quaternion form.\n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"float64 w\n" +
"\n" +
"================================================================================\n" +
"MSG: visualization_msgs/MenuEntry\n" +
"# MenuEntry message.\n" +
"\n" +
"# Each InteractiveMarker message has an array of MenuEntry messages.\n" +
"# A collection of MenuEntries together describe a\n" +
"# menu/submenu/subsubmenu/etc tree, though they are stored in a flat\n" +
"# array.  The tree structure is represented by giving each menu entry\n" +
"# an ID number and a \"parent_id\" field.  Top-level entries are the\n" +
"# ones with parent_id = 0.  Menu entries are ordered within their\n" +
"# level the same way they are ordered in the containing array.  Parent\n" +
"# entries must appear before their children.\n" +
"\n" +
"# Example:\n" +
"# - id = 3\n" +
"#   parent_id = 0\n" +
"#   title = \"fun\"\n" +
"# - id = 2\n" +
"#   parent_id = 0\n" +
"#   title = \"robot\"\n" +
"# - id = 4\n" +
"#   parent_id = 2\n" +
"#   title = \"pr2\"\n" +
"# - id = 5\n" +
"#   parent_id = 2\n" +
"#   title = \"turtle\"\n" +
"#\n" +
"# Gives a menu tree like this:\n" +
"#  - fun\n" +
"#  - robot\n" +
"#    - pr2\n" +
"#    - turtle\n" +
"\n" +
"# ID is a number for each menu entry.  Must be unique within the\n" +
"# control, and should never be 0.\n" +
"uint32 id\n" +
"\n" +
"# ID of the parent of this menu entry, if it is a submenu.  If this\n" +
"# menu entry is a top-level entry, set parent_id to 0.\n" +
"uint32 parent_id\n" +
"\n" +
"# menu / entry title\n" +
"string title\n" +
"\n" +
"# Arguments to command indicated by command_type (below)\n" +
"string command\n" +
"\n" +
"# Command_type stores the type of response desired when this menu\n" +
"# entry is clicked.\n" +
"# FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry's id.\n" +
"# ROSRUN: execute \"rosrun\" with arguments given in the command field (above).\n" +
"# ROSLAUNCH: execute \"roslaunch\" with arguments given in the command field (above).\n" +
"uint8 FEEDBACK=0\n" +
"uint8 ROSRUN=1\n" +
"uint8 ROSLAUNCH=2\n" +
"uint8 command_type\n" +
"\n" +
"================================================================================\n" +
"MSG: visualization_msgs/InteractiveMarkerControl\n" +
"# Represents a control that is to be displayed together with an interactive marker\n" +
"\n" +
"# Identifying string for this control.\n" +
"# You need to assign a unique value to this to receive feedback from the GUI\n" +
"# on what actions the user performs on this control (e.g. a button click).\n" +
"string name\n" +
"\n" +
"\n" +
"# Defines the local coordinate frame (relative to the pose of the parent\n" +
"# interactive marker) in which is being rotated and translated.\n" +
"# Default: Identity\n" +
"geometry_msgs/Quaternion orientation\n" +
"\n" +
"\n" +
"# Orientation mode: controls how orientation changes.\n" +
"# INHERIT: Follow orientation of interactive marker\n" +
"# FIXED: Keep orientation fixed at initial state\n" +
"# VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).\n" +
"uint8 INHERIT = 0 \n" +
"uint8 FIXED = 1\n" +
"uint8 VIEW_FACING = 2\n" +
"\n" +
"uint8 orientation_mode\n" +
"\n" +
"# Interaction mode for this control\n" +
"# \n" +
"# NONE: This control is only meant for visualization; no context menu.\n" +
"# MENU: Like NONE, but right-click menu is active.\n" +
"# BUTTON: Element can be left-clicked.\n" +
"# MOVE_AXIS: Translate along local x-axis.\n" +
"# MOVE_PLANE: Translate in local y-z plane.\n" +
"# ROTATE_AXIS: Rotate around local x-axis.\n" +
"# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.\n" +
"uint8 NONE = 0 \n" +
"uint8 MENU = 1\n" +
"uint8 BUTTON = 2\n" +
"uint8 MOVE_AXIS = 3 \n" +
"uint8 MOVE_PLANE = 4\n" +
"uint8 ROTATE_AXIS = 5\n" +
"uint8 MOVE_ROTATE = 6\n" +
"\n" +
"uint8 interaction_mode\n" +
"\n" +
"\n" +
"# If true, the contained markers will also be visible\n" +
"# when the gui is not in interactive mode.\n" +
"bool always_visible\n" +
"\n" +
"\n" +
"# Markers to be displayed as custom visual representation.\n" +
"# Leave this empty to use the default control handles.\n" +
"#\n" +
"# Note: \n" +
"# - The markers can be defined in an arbitrary coordinate frame,\n" +
"#   but will be transformed into the local frame of the interactive marker.\n" +
"# - If the header of a marker is empty, its pose will be interpreted as \n" +
"#   relative to the pose of the parent interactive marker.\n" +
"Marker[] markers\n" +
"\n" +
"\n" +
"# In VIEW_FACING mode, set this to true if you don't want the markers\n" +
"# to be aligned with the camera view point. The markers will show up\n" +
"# as in INHERIT mode.\n" +
"bool independent_marker_orientation\n" +
"\n" +
"\n" +
"# Short description (< 40 characters) of what this control does,\n" +
"# e.g. \"Move the robot\". \n" +
"# Default: A generic description based on the interaction mode\n" +
"string description\n" +
"\n" +
"================================================================================\n" +
"MSG: visualization_msgs/Marker\n" +
"# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n" +
"\n" +
"uint8 ARROW=0\n" +
"uint8 CUBE=1\n" +
"uint8 SPHERE=2\n" +
"uint8 CYLINDER=3\n" +
"uint8 LINE_STRIP=4\n" +
"uint8 LINE_LIST=5\n" +
"uint8 CUBE_LIST=6\n" +
"uint8 SPHERE_LIST=7\n" +
"uint8 POINTS=8\n" +
"uint8 TEXT_VIEW_FACING=9\n" +
"uint8 MESH_RESOURCE=10\n" +
"uint8 TRIANGLE_LIST=11\n" +
"\n" +
"uint8 ADD=0\n" +
"uint8 MODIFY=0\n" +
"uint8 DELETE=2\n" +
"\n" +
"Header header                        # header for time/frame information\n" +
"string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\n" +
"int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\n" +
"int32 type 		                       # Type of object\n" +
"int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object\n" +
"geometry_msgs/Pose pose                 # Pose of the object\n" +
"geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\n" +
"std_msgs/ColorRGBA color             # Color [0.0-1.0]\n" +
"duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\n" +
"bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n" +
"\n" +
"#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n" +
"geometry_msgs/Point[] points\n" +
"#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n" +
"#number of colors must either be 0 or equal to the number of points\n" +
"#NOTE: alpha is not yet used\n" +
"std_msgs/ColorRGBA[] colors\n" +
"\n" +
"# NOTE: only used for text markers\n" +
"string text\n" +
"\n" +
"# NOTE: only used for MESH_RESOURCE markers\n" +
"string mesh_resource\n" +
"bool mesh_use_embedded_materials\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Vector3\n" +
"# This represents a vector in free space. \n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"================================================================================\n" +
"MSG: std_msgs/ColorRGBA\n" +
"float32 r\n" +
"float32 g\n" +
"float32 b\n" +
"float32 a\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public InteractiveMarker clone() {
    InteractiveMarker c = new InteractiveMarker();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += pose.serializationLength();
    __l += 4 + name.length();
    __l += 4 + description.length();
    __l += 4; // scale
    __l += 4;
    for(ros.pkg.visualization_msgs.msg.MenuEntry val : menu_entries) {
      __l += val.serializationLength();
    }
    __l += 4;
    for(ros.pkg.visualization_msgs.msg.InteractiveMarkerControl val : controls) {
      __l += val.serializationLength();
    }
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    pose.serialize(bb, seq);
    Serialization.writeString(bb, name);
    Serialization.writeString(bb, description);
    bb.putFloat(scale);
    bb.putInt(menu_entries.size());
    for(ros.pkg.visualization_msgs.msg.MenuEntry val : menu_entries) {
      val.serialize(bb, seq);
    }
    bb.putInt(controls.size());
    for(ros.pkg.visualization_msgs.msg.InteractiveMarkerControl val : controls) {
      val.serialize(bb, seq);
    }
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    pose.deserialize(bb);
    name = Serialization.readString(bb);
    description = Serialization.readString(bb);
    scale = bb.getFloat();

    int __menu_entries_len = bb.getInt();
    menu_entries = new java.util.ArrayList<ros.pkg.visualization_msgs.msg.MenuEntry>(__menu_entries_len);
    for(int __i=0; __i<__menu_entries_len; __i++) {
      ros.pkg.visualization_msgs.msg.MenuEntry __tmp = new ros.pkg.visualization_msgs.msg.MenuEntry();
      __tmp.deserialize(bb);
      menu_entries.add(__tmp);;
    }

    int __controls_len = bb.getInt();
    controls = new java.util.ArrayList<ros.pkg.visualization_msgs.msg.InteractiveMarkerControl>(__controls_len);
    for(int __i=0; __i<__controls_len; __i++) {
      ros.pkg.visualization_msgs.msg.InteractiveMarkerControl __tmp = new ros.pkg.visualization_msgs.msg.InteractiveMarkerControl();
      __tmp.deserialize(bb);
      controls.add(__tmp);;
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof InteractiveMarker))
      return false;
    InteractiveMarker other = (InteractiveMarker) o;
    return
      header.equals(other.header) &&
      pose.equals(other.pose) &&
      name.equals(other.name) &&
      description.equals(other.description) &&
      scale == other.scale &&
      menu_entries.equals(other.menu_entries) &&
      controls.equals(other.controls) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (this.pose == null ? 0 : this.pose.hashCode());
    result = prime * result + (this.name == null ? 0 : this.name.hashCode());
    result = prime * result + (this.description == null ? 0 : this.description.hashCode());
    result = prime * result + Float.floatToIntBits(this.scale);
    result = prime * result + (this.menu_entries == null ? 0 : this.menu_entries.hashCode());
    result = prime * result + (this.controls == null ? 0 : this.controls.hashCode());
    return result;
  }
} // class InteractiveMarker

