/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/sensor_msgs/msg/ChannelFloat32.msg */

package ros.pkg.sensor_msgs.msg;

import java.nio.ByteBuffer;

public class ChannelFloat32 extends ros.communication.Message {

  public java.lang.String name = new java.lang.String();
  public float[] values = new float[0];

  public ChannelFloat32() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/ChannelFloat32"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "3d40139cdd33dfedcb71ffeeeb42ae7f"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# This message is used by the PointCloud message to hold optional data\n" +
"# associated with each point in the cloud. The length of the values\n" +
"# array should be the same as the length of the points array in the\n" +
"# PointCloud, and each value should be associated with the corresponding\n" +
"# point.\n" +
"\n" +
"# Channel names in existing practice include:\n" +
"#   \"u\", \"v\" - row and column (respectively) in the left stereo image.\n" +
"#              This is opposite to usual conventions but remains for\n" +
"#              historical reasons. The newer PointCloud2 message has no\n" +
"#              such problem.\n" +
"#   \"rgb\" - For point clouds produced by color stereo cameras. uint8\n" +
"#           (R,G,B) values packed into the least significant 24 bits,\n" +
"#           in order.\n" +
"#   \"intensity\" - laser or pixel intensity.\n" +
"#   \"distance\"\n" +
"\n" +
"# The channel name should give semantics of the channel (e.g.\n" +
"# \"intensity\" instead of \"value\").\n" +
"string name\n" +
"\n" +
"# The values array should be 1-1 with the elements of the associated\n" +
"# PointCloud.\n" +
"float32[] values\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public ChannelFloat32 clone() {
    ChannelFloat32 c = new ChannelFloat32();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 4 + name.length();
    __l += 4 + values.length * 4; // values
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    Serialization.writeString(bb, name);
    bb.putInt(values.length);
    for(float val : values) {
      bb.putFloat(val);
    }
  }

  public void deserialize(ByteBuffer bb) {
    name = Serialization.readString(bb);

    int __values_len = bb.getInt();
    values = new float[__values_len];
    for(int __i=0; __i<__values_len; __i++) {
      values[__i] = bb.getFloat();
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof ChannelFloat32))
      return false;
    ChannelFloat32 other = (ChannelFloat32) o;
    return
      name.equals(other.name) &&
      java.util.Arrays.equals(values, other.values) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.name == null ? 0 : this.name.hashCode());
    result = prime * result + java.util.Arrays.hashCode(this.values);
    return result;
  }
} // class ChannelFloat32

