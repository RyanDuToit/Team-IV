/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/sensor_msgs/msg/Joy.msg */

package ros.pkg.sensor_msgs.msg;

import java.nio.ByteBuffer;

public class Joy extends ros.communication.Message {

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public float[] axes = new float[0];
  public int[] buttons = new int[0];

  public Joy() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/Joy"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "5a9ea5f83505693b71e785041e67a8bb"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# Reports the state of a joysticks axes and buttons.\n" +
"Header header           # timestamp in the header is the time the data is received from the joystick\n" +
"float32[] axes          # the axes measurements from a joystick\n" +
"int32[] buttons         # the buttons measurements from a joystick \n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public Joy clone() {
    Joy c = new Joy();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 4 + axes.length * 4; // axes
    __l += 4 + buttons.length * 4; // buttons
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    bb.putInt(axes.length);
    for(float val : axes) {
      bb.putFloat(val);
    }
    bb.putInt(buttons.length);
    for(int val : buttons) {
      bb.putInt(val);
    }
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);

    int __axes_len = bb.getInt();
    axes = new float[__axes_len];
    for(int __i=0; __i<__axes_len; __i++) {
      axes[__i] = bb.getFloat();
    }

    int __buttons_len = bb.getInt();
    buttons = new int[__buttons_len];
    for(int __i=0; __i<__buttons_len; __i++) {
      buttons[__i] = bb.getInt();
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof Joy))
      return false;
    Joy other = (Joy) o;
    return
      header.equals(other.header) &&
      java.util.Arrays.equals(axes, other.axes) &&
      java.util.Arrays.equals(buttons, other.buttons) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + java.util.Arrays.hashCode(this.axes);
    result = prime * result + java.util.Arrays.hashCode(this.buttons);
    return result;
  }
} // class Joy

