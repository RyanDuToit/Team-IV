/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/sensor_msgs/msg/NavSatFix.msg */

package ros.pkg.sensor_msgs.msg;

import java.nio.ByteBuffer;

public class NavSatFix extends ros.communication.Message {
  static public final short COVARIANCE_TYPE_UNKNOWN = 0;
  static public final short COVARIANCE_TYPE_APPROXIMATED = 1;
  static public final short COVARIANCE_TYPE_DIAGONAL_KNOWN = 2;
  static public final short COVARIANCE_TYPE_KNOWN = 3;

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public ros.pkg.sensor_msgs.msg.NavSatStatus status = new ros.pkg.sensor_msgs.msg.NavSatStatus();
  public double latitude;
  public double longitude;
  public double altitude;
  public double[] position_covariance = new double[9];
  public short position_covariance_type;

  public NavSatFix() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/NavSatFix"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "2d3a8cd499b9b4a0249fb98fd05cfa48"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# Navigation Satellite fix for any Global Navigation Satellite System\n" +
"#\n" +
"# Specified using the WGS 84 reference ellipsoid\n" +
"\n" +
"# Header specifies ROS time and frame of reference for this fix.\n" +
"Header header\n" +
"\n" +
"# satellite fix status information\n" +
"sensor_msgs/NavSatStatus status\n" +
"\n" +
"# Latitude [degrees]. Positive is north of equator; negative is south.\n" +
"float64 latitude\n" +
"\n" +
"# Longitude [degrees]. Positive is east of prime meridian; negative is west.\n" +
"float64 longitude\n" +
"\n" +
"# Altitude [m]. Positive is above the WGS 84 ellipsoid.\n" +
"float64 altitude\n" +
"\n" +
"# Position covariance [m^2] defined relative to a tangential plane\n" +
"# through the reported position. The components are East, North, and\n" +
"# Up (ENU), in row-major order.\n" +
"#\n" +
"# Beware: this coordinate system exhibits singularities at the poles.\n" +
"\n" +
"float64[9] position_covariance\n" +
"\n" +
"# If the covariance of the fix is known, fill it in completely. If the\n" +
"# GPS receiver provides the variance of each measurement, put them\n" +
"# along the diagonal. If only Dilution of Precision is available,\n" +
"# estimate an approximate covariance from that.\n" +
"\n" +
"uint8 COVARIANCE_TYPE_UNKNOWN = 0\n" +
"uint8 COVARIANCE_TYPE_APPROXIMATED = 1\n" +
"uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\n" +
"uint8 COVARIANCE_TYPE_KNOWN = 3\n" +
"\n" +
"uint8 position_covariance_type\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: sensor_msgs/NavSatStatus\n" +
"# Navigation Satellite fix status for any Global Navigation Satellite System\n" +
"\n" +
"# Whether to output an augmented fix is determined by both the fix\n" +
"# type and the last time differential corrections were received.  A\n" +
"# fix is valid when status >= STATUS_FIX.\n" +
"\n" +
"int8 STATUS_NO_FIX =  -1        # unable to fix position\n" +
"int8 STATUS_FIX =      0        # unaugmented fix\n" +
"int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\n" +
"int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n" +
"\n" +
"int8 status\n" +
"\n" +
"# Bits defining which Global Navigation Satellite System signals were\n" +
"# used by the receiver.\n" +
"\n" +
"uint16 SERVICE_GPS =     1\n" +
"uint16 SERVICE_GLONASS = 2\n" +
"uint16 SERVICE_COMPASS = 4      # includes BeiDou.\n" +
"uint16 SERVICE_GALILEO = 8\n" +
"\n" +
"uint16 service\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public NavSatFix clone() {
    NavSatFix c = new NavSatFix();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += status.serializationLength();
    __l += 8; // latitude
    __l += 8; // longitude
    __l += 8; // altitude
    __l += 72; // position_covariance
    __l += 1; // position_covariance_type
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    status.serialize(bb, seq);
    bb.putDouble(latitude);
    bb.putDouble(longitude);
    bb.putDouble(altitude);

    for(double val : position_covariance) {
      bb.putDouble(val);
    }
    bb.put((byte)position_covariance_type);
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    status.deserialize(bb);
    latitude = bb.getDouble();
    longitude = bb.getDouble();
    altitude = bb.getDouble();

    int __position_covariance_len = position_covariance.length;;
    position_covariance = new double[__position_covariance_len];
    for(int __i=0; __i<__position_covariance_len; __i++) {
      position_covariance[__i] = bb.getDouble();
    }
    position_covariance_type = (short)(bb.get() & 0xff);
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof NavSatFix))
      return false;
    NavSatFix other = (NavSatFix) o;
    return
      header.equals(other.header) &&
      status.equals(other.status) &&
      latitude == other.latitude &&
      longitude == other.longitude &&
      altitude == other.altitude &&
      java.util.Arrays.equals(position_covariance, other.position_covariance) &&
      position_covariance_type == other.position_covariance_type &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (this.status == null ? 0 : this.status.hashCode());
    result = prime * result + (int)((tmp = Double.doubleToLongBits(this.latitude)) ^ (tmp >>> 32));
    result = prime * result + (int)((tmp = Double.doubleToLongBits(this.longitude)) ^ (tmp >>> 32));
    result = prime * result + (int)((tmp = Double.doubleToLongBits(this.altitude)) ^ (tmp >>> 32));
    result = prime * result + java.util.Arrays.hashCode(this.position_covariance);
    result = prime * result + this.position_covariance_type;
    return result;
  }
} // class NavSatFix

