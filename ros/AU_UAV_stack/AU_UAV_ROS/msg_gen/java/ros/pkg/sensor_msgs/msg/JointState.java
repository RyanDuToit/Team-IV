/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/sensor_msgs/msg/JointState.msg */

package ros.pkg.sensor_msgs.msg;

import java.nio.ByteBuffer;

public class JointState extends ros.communication.Message {

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public java.util.ArrayList<java.lang.String> name = new java.util.ArrayList<java.lang.String>();
  public double[] position = new double[0];
  public double[] velocity = new double[0];
  public double[] effort = new double[0];

  public JointState() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/JointState"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "3066dcd76a6cfaef579bd0f34173e9fd"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# This is a message that holds data to describe the state of a set of torque controlled joints. \n" +
"#\n" +
"# The state of each joint (revolute or prismatic) is defined by:\n" +
"#  * the position of the joint (rad or m),\n" +
"#  * the velocity of the joint (rad/s or m/s) and \n" +
"#  * the effort that is applied in the joint (Nm or N).\n" +
"#\n" +
"# Each joint is uniquely identified by its name\n" +
"# The header specifies the time at which the joint states were recorded. All the joint states\n" +
"# in one message have to be recorded at the same time.\n" +
"#\n" +
"# This message consists of a multiple arrays, one for each part of the joint state. \n" +
"# The goal is to make each of the fields optional. When e.g. your joints have no\n" +
"# effort associated with them, you can leave the effort array empty. \n" +
"#\n" +
"# All arrays in this message should have the same size, or be empty.\n" +
"# This is the only way to uniquely associate the joint name with the correct\n" +
"# states.\n" +
"\n" +
"\n" +
"Header header\n" +
"\n" +
"string[] name\n" +
"float64[] position\n" +
"float64[] velocity\n" +
"float64[] effort\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public JointState clone() {
    JointState c = new JointState();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 4;
    for(java.lang.String val : name) {
      __l += 4 + val.length();
    }
    __l += 4 + position.length * 8; // position
    __l += 4 + velocity.length * 8; // velocity
    __l += 4 + effort.length * 8; // effort
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    bb.putInt(name.size());
    for(java.lang.String val : name) {
      Serialization.writeString(bb, val);
    }
    bb.putInt(position.length);
    for(double val : position) {
      bb.putDouble(val);
    }
    bb.putInt(velocity.length);
    for(double val : velocity) {
      bb.putDouble(val);
    }
    bb.putInt(effort.length);
    for(double val : effort) {
      bb.putDouble(val);
    }
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);

    int __name_len = bb.getInt();
    name = new java.util.ArrayList<java.lang.String>(__name_len);
    for(int __i=0; __i<__name_len; __i++) {
      name.add(Serialization.readString(bb));
    }

    int __position_len = bb.getInt();
    position = new double[__position_len];
    for(int __i=0; __i<__position_len; __i++) {
      position[__i] = bb.getDouble();
    }

    int __velocity_len = bb.getInt();
    velocity = new double[__velocity_len];
    for(int __i=0; __i<__velocity_len; __i++) {
      velocity[__i] = bb.getDouble();
    }

    int __effort_len = bb.getInt();
    effort = new double[__effort_len];
    for(int __i=0; __i<__effort_len; __i++) {
      effort[__i] = bb.getDouble();
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof JointState))
      return false;
    JointState other = (JointState) o;
    return
      header.equals(other.header) &&
      name.equals(other.name) &&
      java.util.Arrays.equals(position, other.position) &&
      java.util.Arrays.equals(velocity, other.velocity) &&
      java.util.Arrays.equals(effort, other.effort) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (this.name == null ? 0 : this.name.hashCode());
    result = prime * result + java.util.Arrays.hashCode(this.position);
    result = prime * result + java.util.Arrays.hashCode(this.velocity);
    result = prime * result + java.util.Arrays.hashCode(this.effort);
    return result;
  }
} // class JointState

