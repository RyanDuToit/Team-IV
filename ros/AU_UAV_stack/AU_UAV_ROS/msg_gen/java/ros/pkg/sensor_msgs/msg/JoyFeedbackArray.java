/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/sensor_msgs/msg/JoyFeedbackArray.msg */

package ros.pkg.sensor_msgs.msg;

import java.nio.ByteBuffer;

public class JoyFeedbackArray extends ros.communication.Message {

  public java.util.ArrayList<ros.pkg.sensor_msgs.msg.JoyFeedback> array = new java.util.ArrayList<ros.pkg.sensor_msgs.msg.JoyFeedback>();

  public JoyFeedbackArray() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/JoyFeedbackArray"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "cde5730a895b1fc4dee6f91b754b213d"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# This message publishes values for multiple feedback at once. \n" +
"JoyFeedback[] array\n" +
"================================================================================\n" +
"MSG: sensor_msgs/JoyFeedback\n" +
"# Declare of the type of feedback\n" +
"uint8 TYPE_LED    = 0\n" +
"uint8 TYPE_RUMBLE = 1\n" +
"uint8 TYPE_BUZZER = 2\n" +
"\n" +
"uint8 type\n" +
"\n" +
"# This will hold an id number for each type of each feedback.\n" +
"# Example, the first led would be id=0, the second would be id=1\n" +
"uint8 id\n" +
"\n" +
"# Intensity of the feedback, from 0.0 to 1.0, inclusive.  If device is\n" +
"# actually binary, driver should treat 0<=x<0.5 as off, 0.5<=x<=1 as on.\n" +
"float32 intensity\n" +
"\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public JoyFeedbackArray clone() {
    JoyFeedbackArray c = new JoyFeedbackArray();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 4;
    for(ros.pkg.sensor_msgs.msg.JoyFeedback val : array) {
      __l += val.serializationLength();
    }
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    bb.putInt(array.size());
    for(ros.pkg.sensor_msgs.msg.JoyFeedback val : array) {
      val.serialize(bb, seq);
    }
  }

  public void deserialize(ByteBuffer bb) {

    int __array_len = bb.getInt();
    array = new java.util.ArrayList<ros.pkg.sensor_msgs.msg.JoyFeedback>(__array_len);
    for(int __i=0; __i<__array_len; __i++) {
      ros.pkg.sensor_msgs.msg.JoyFeedback __tmp = new ros.pkg.sensor_msgs.msg.JoyFeedback();
      __tmp.deserialize(bb);
      array.add(__tmp);;
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof JoyFeedbackArray))
      return false;
    JoyFeedbackArray other = (JoyFeedbackArray) o;
    return
      array.equals(other.array) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.array == null ? 0 : this.array.hashCode());
    return result;
  }
} // class JoyFeedbackArray

