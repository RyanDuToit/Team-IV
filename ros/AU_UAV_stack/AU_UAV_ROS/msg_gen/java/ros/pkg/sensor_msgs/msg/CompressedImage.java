/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/sensor_msgs/msg/CompressedImage.msg */

package ros.pkg.sensor_msgs.msg;

import java.nio.ByteBuffer;

public class CompressedImage extends ros.communication.Message {

  public ros.pkg.std_msgs.msg.Header header = new ros.pkg.std_msgs.msg.Header();
  public java.lang.String format = new java.lang.String();
  public short[] data = new short[0];

  public CompressedImage() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/CompressedImage"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "8f7a12909da2c9d3332d540a0977563f"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# This message contains a compressed image\n" +
"\n" +
"Header header        # Header timestamp should be acquisition time of image\n" +
"                     # Header frame_id should be optical frame of camera\n" +
"                     # origin of frame should be optical center of cameara\n" +
"                     # +x should point to the right in the image\n" +
"                     # +y should point down in the image\n" +
"                     # +z should point into to plane of the image\n" +
"\n" +
"string format        # Specifies the format of the data\n" +
"                     #   Acceptable values:\n" +
"                     #     jpeg, png\n" +
"uint8[] data         # Compressed image buffer\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public CompressedImage clone() {
    CompressedImage c = new CompressedImage();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 4 + format.length();
    __l += 4 + data.length * 1; // data
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    Serialization.writeString(bb, format);
    bb.putInt(data.length);
    for(short val : data) {
      bb.put((byte)val);
    }
  }

  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    format = Serialization.readString(bb);

    int __data_len = bb.getInt();
    data = new short[__data_len];
    for(int __i=0; __i<__data_len; __i++) {
      data[__i] = (short)(bb.get() & 0xff);
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof CompressedImage))
      return false;
    CompressedImage other = (CompressedImage) o;
    return
      header.equals(other.header) &&
      format.equals(other.format) &&
      java.util.Arrays.equals(data, other.data) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + (this.format == null ? 0 : this.format.hashCode());
    result = prime * result + java.util.Arrays.hashCode(this.data);
    return result;
  }
} // class CompressedImage

