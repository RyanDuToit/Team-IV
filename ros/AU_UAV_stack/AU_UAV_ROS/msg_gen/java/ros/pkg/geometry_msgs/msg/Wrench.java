/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/geometry_msgs/msg/Wrench.msg */

package ros.pkg.geometry_msgs.msg;

import java.nio.ByteBuffer;

public class Wrench extends ros.communication.Message {

  public ros.pkg.geometry_msgs.msg.Vector3 force = new ros.pkg.geometry_msgs.msg.Vector3();
  public ros.pkg.geometry_msgs.msg.Vector3 torque = new ros.pkg.geometry_msgs.msg.Vector3();

  public Wrench() {
  }

  public static java.lang.String __s_getDataType() { return "geometry_msgs/Wrench"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "4f539cf138b23283b520fd271b567936"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# This represents force in free space, seperated into \n" +
"# it's linear and angular parts.  \n" +
"Vector3  force\n" +
"Vector3  torque\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Vector3\n" +
"# This represents a vector in free space. \n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public Wrench clone() {
    Wrench c = new Wrench();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += force.serializationLength();
    __l += torque.serializationLength();
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    force.serialize(bb, seq);
    torque.serialize(bb, seq);
  }

  public void deserialize(ByteBuffer bb) {
    force.deserialize(bb);
    torque.deserialize(bb);
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof Wrench))
      return false;
    Wrench other = (Wrench) o;
    return
      force.equals(other.force) &&
      torque.equals(other.torque) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.force == null ? 0 : this.force.hashCode());
    result = prime * result + (this.torque == null ? 0 : this.torque.hashCode());
    return result;
  }
} // class Wrench

