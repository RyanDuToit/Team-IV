/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/geometry_msgs/msg/Point32.msg */

package ros.pkg.geometry_msgs.msg;

import java.nio.ByteBuffer;

public class Point32 extends ros.communication.Message {

  public float x;
  public float y;
  public float z;

  public Point32() {
  }

  public static java.lang.String __s_getDataType() { return "geometry_msgs/Point32"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "cc153912f1453b708d221682bc23d9ac"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# This contains the position of a point in free space(with 32 bits of precision).\n" +
"# It is recommeded to use Point wherever possible instead of Point32.  \n" +
"# \n" +
"# This recommendation is to promote interoperability.  \n" +
"#\n" +
"# This message is designed to take up less space when sending\n" +
"# lots of points at once, as in the case of a PointCloud.  \n" +
"\n" +
"float32 x\n" +
"float32 y\n" +
"float32 z\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public Point32 clone() {
    Point32 c = new Point32();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 4; // x
    __l += 4; // y
    __l += 4; // z
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    bb.putFloat(x);
    bb.putFloat(y);
    bb.putFloat(z);
  }

  public void deserialize(ByteBuffer bb) {
    x = bb.getFloat();
    y = bb.getFloat();
    z = bb.getFloat();
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof Point32))
      return false;
    Point32 other = (Point32) o;
    return
      x == other.x &&
      y == other.y &&
      z == other.z &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + Float.floatToIntBits(this.x);
    result = prime * result + Float.floatToIntBits(this.y);
    result = prime * result + Float.floatToIntBits(this.z);
    return result;
  }
} // class Point32

