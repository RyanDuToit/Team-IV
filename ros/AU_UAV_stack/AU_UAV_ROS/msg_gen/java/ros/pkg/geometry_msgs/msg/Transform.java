/* Auto-generated by genmsg_java.py for file /opt/ros/electric/stacks/common_msgs/geometry_msgs/msg/Transform.msg */

package ros.pkg.geometry_msgs.msg;

import java.nio.ByteBuffer;

public class Transform extends ros.communication.Message {

  public ros.pkg.geometry_msgs.msg.Vector3 translation = new ros.pkg.geometry_msgs.msg.Vector3();
  public ros.pkg.geometry_msgs.msg.Quaternion rotation = new ros.pkg.geometry_msgs.msg.Quaternion();

  public Transform() {
  }

  public static java.lang.String __s_getDataType() { return "geometry_msgs/Transform"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "ac9eff44abf714214112b05d54a3cf9b"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# This represents the transform between two coordinate frames in free space.\n" +
"\n" +
"Vector3 translation\n" +
"Quaternion rotation\n" +
"\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Vector3\n" +
"# This represents a vector in free space. \n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"================================================================================\n" +
"MSG: geometry_msgs/Quaternion\n" +
"# This represents an orientation in free space in quaternion form.\n" +
"\n" +
"float64 x\n" +
"float64 y\n" +
"float64 z\n" +
"float64 w\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public Transform clone() {
    Transform c = new Transform();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += translation.serializationLength();
    __l += rotation.serializationLength();
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    translation.serialize(bb, seq);
    rotation.serialize(bb, seq);
  }

  public void deserialize(ByteBuffer bb) {
    translation.deserialize(bb);
    rotation.deserialize(bb);
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof Transform))
      return false;
    Transform other = (Transform) o;
    return
      translation.equals(other.translation) &&
      rotation.equals(other.rotation) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.translation == null ? 0 : this.translation.hashCode());
    result = prime * result + (this.rotation == null ? 0 : this.rotation.hashCode());
    return result;
  }
} // class Transform

