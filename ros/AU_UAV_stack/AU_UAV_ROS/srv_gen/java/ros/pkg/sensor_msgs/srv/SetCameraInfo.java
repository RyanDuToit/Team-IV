/* Auto-generated by genmsg_cpp for file /opt/ros/electric/stacks/common_msgs/sensor_msgs/srv/SetCameraInfo.srv */

package ros.pkg.sensor_msgs.srv;

import java.nio.ByteBuffer;


public class SetCameraInfo extends ros.communication.Service<SetCameraInfo.Request, SetCameraInfo.Response> {

  public static java.lang.String __s_getDataType() { return "sensor_msgs/SetCameraInfo"; }
  public static java.lang.String __s_getMD5Sum() { return "bef1df590ed75ed1f393692395e15482"; }

  public java.lang.String getDataType() { return SetCameraInfo.__s_getDataType(); }
  public java.lang.String getMD5Sum() { return SetCameraInfo.__s_getMD5Sum(); }

  public SetCameraInfo.Request createRequest() {
    return new SetCameraInfo.Request();
  }

  public SetCameraInfo.Response createResponse() {
    return new SetCameraInfo.Response();
  }

static public class Request extends ros.communication.Message {

  public ros.pkg.sensor_msgs.msg.CameraInfo camera_info = new ros.pkg.sensor_msgs.msg.CameraInfo();

  public Request() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/SetCameraInfoRequest"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "ee34be01fdeee563d0d99cd594d5581d"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getServerMD5Sum() { return "bef1df590ed75ed1f393692395e15482"; }
  public java.lang.String getServerMD5Sum() { return __s_getServerMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "\n" +
"\n" +
"\n" +
"\n" +
"\n" +
"\n" +
"\n" +
"\n" +
"sensor_msgs/CameraInfo camera_info\n" +
"\n" +
"================================================================================\n" +
"MSG: sensor_msgs/CameraInfo\n" +
"# This message defines meta information for a camera. It should be in a\n" +
"# camera namespace on topic \"camera_info\" and accompanied by up to five\n" +
"# image topics named:\n" +
"#\n" +
"#   image_raw - raw data from the camera driver, possibly Bayer encoded\n" +
"#   image            - monochrome, distorted\n" +
"#   image_color      - color, distorted\n" +
"#   image_rect       - monochrome, rectified\n" +
"#   image_rect_color - color, rectified\n" +
"#\n" +
"# The image_pipeline contains packages (image_proc, stereo_image_proc)\n" +
"# for producing the four processed image topics from image_raw and\n" +
"# camera_info. The meaning of the camera parameters are described in\n" +
"# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n" +
"#\n" +
"# The image_geometry package provides a user-friendly interface to\n" +
"# common operations using this meta information. If you want to, e.g.,\n" +
"# project a 3d point into image coordinates, we strongly recommend\n" +
"# using image_geometry.\n" +
"#\n" +
"# If the camera is uncalibrated, the matrices D, K, R, P should be left\n" +
"# zeroed out. In particular, clients may assume that K[0] == 0.0\n" +
"# indicates an uncalibrated camera.\n" +
"\n" +
"#######################################################################\n" +
"#                     Image acquisition info                          #\n" +
"#######################################################################\n" +
"\n" +
"# Time of image acquisition, camera coordinate frame ID\n" +
"Header header    # Header timestamp should be acquisition time of image\n" +
"                 # Header frame_id should be optical frame of camera\n" +
"                 # origin of frame should be optical center of camera\n" +
"                 # +x should point to the right in the image\n" +
"                 # +y should point down in the image\n" +
"                 # +z should point into the plane of the image\n" +
"\n" +
"\n" +
"#######################################################################\n" +
"#                      Calibration Parameters                         #\n" +
"#######################################################################\n" +
"# These are fixed during camera calibration. Their values will be the #\n" +
"# same in all messages until the camera is recalibrated. Note that    #\n" +
"# self-calibrating systems may \"recalibrate\" frequently.              #\n" +
"#                                                                     #\n" +
"# The internal parameters can be used to warp a raw (distorted) image #\n" +
"# to:                                                                 #\n" +
"#   1. An undistorted image (requires D and K)                        #\n" +
"#   2. A rectified image (requires D, K, R)                           #\n" +
"# The projection matrix P projects 3D points into the rectified image.#\n" +
"#######################################################################\n" +
"\n" +
"# The image dimensions with which the camera was calibrated. Normally\n" +
"# this will be the full camera resolution in pixels.\n" +
"uint32 height\n" +
"uint32 width\n" +
"\n" +
"# The distortion model used. Supported models are listed in\n" +
"# sensor_msgs/distortion_models.h. For most cameras, \"plumb_bob\" - a\n" +
"# simple model of radial and tangential distortion - is sufficent.\n" +
"string distortion_model\n" +
"\n" +
"# The distortion parameters, size depending on the distortion model.\n" +
"# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\n" +
"float64[] D\n" +
"\n" +
"# Intrinsic camera matrix for the raw (distorted) images.\n" +
"#     [fx  0 cx]\n" +
"# K = [ 0 fy cy]\n" +
"#     [ 0  0  1]\n" +
"# Projects 3D points in the camera coordinate frame to 2D pixel\n" +
"# coordinates using the focal lengths (fx, fy) and principal point\n" +
"# (cx, cy).\n" +
"float64[9]  K # 3x3 row-major matrix\n" +
"\n" +
"# Rectification matrix (stereo cameras only)\n" +
"# A rotation matrix aligning the camera coordinate system to the ideal\n" +
"# stereo image plane so that epipolar lines in both stereo images are\n" +
"# parallel.\n" +
"float64[9]  R # 3x3 row-major matrix\n" +
"\n" +
"# Projection/camera matrix\n" +
"#     [fx'  0  cx' Tx]\n" +
"# P = [ 0  fy' cy' Ty]\n" +
"#     [ 0   0   1   0]\n" +
"# By convention, this matrix specifies the intrinsic (camera) matrix\n" +
"#  of the processed (rectified) image. That is, the left 3x3 portion\n" +
"#  is the normal camera intrinsic matrix for the rectified image.\n" +
"# It projects 3D points in the camera coordinate frame to 2D pixel\n" +
"#  coordinates using the focal lengths (fx', fy') and principal point\n" +
"#  (cx', cy') - these may differ from the values in K.\n" +
"# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n" +
"#  also have R = the identity and P[1:3,1:3] = K.\n" +
"# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n" +
"#  position of the optical center of the second camera in the first\n" +
"#  camera's frame. We assume Tz = 0 so both cameras are in the same\n" +
"#  stereo image plane. The first camera always has Tx = Ty = 0. For\n" +
"#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n" +
"#  Tx = -fx' * B, where B is the baseline between the cameras.\n" +
"# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n" +
"#  the rectified image is given by:\n" +
"#  [u v w]' = P * [X Y Z 1]'\n" +
"#         x = u / w\n" +
"#         y = v / w\n" +
"#  This holds for both images of a stereo pair.\n" +
"float64[12] P # 3x4 row-major matrix\n" +
"\n" +
"\n" +
"#######################################################################\n" +
"#                      Operational Parameters                         #\n" +
"#######################################################################\n" +
"# These define the image region actually captured by the camera       #\n" +
"# driver. Although they affect the geometry of the output image, they #\n" +
"# may be changed freely without recalibrating the camera.             #\n" +
"#######################################################################\n" +
"\n" +
"# Binning refers here to any camera setting which combines rectangular\n" +
"#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n" +
"#  resolution of the output image to\n" +
"#  (width / binning_x) x (height / binning_y).\n" +
"# The default values binning_x = binning_y = 0 is considered the same\n" +
"#  as binning_x = binning_y = 1 (no subsampling).\n" +
"uint32 binning_x\n" +
"uint32 binning_y\n" +
"\n" +
"# Region of interest (subwindow of full camera resolution), given in\n" +
"#  full resolution (unbinned) image coordinates. A particular ROI\n" +
"#  always denotes the same window of pixels on the camera sensor,\n" +
"#  regardless of binning settings.\n" +
"# The default setting of roi (all values 0) is considered the same as\n" +
"#  full resolution (roi.width = width, roi.height = height).\n" +
"RegionOfInterest roi\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
"================================================================================\n" +
"MSG: sensor_msgs/RegionOfInterest\n" +
"# This message is used to specify a region of interest within an image.\n" +
"#\n" +
"# When used to specify the ROI setting of the camera when the image was\n" +
"# taken, the height and width fields should either match the height and\n" +
"# width fields for the associated image; or height = width = 0\n" +
"# indicates that the full resolution image was captured.\n" +
"\n" +
"uint32 x_offset  # Leftmost pixel of the ROI\n" +
"                 # (0 if the ROI includes the left edge of the image)\n" +
"uint32 y_offset  # Topmost pixel of the ROI\n" +
"                 # (0 if the ROI includes the top edge of the image)\n" +
"uint32 height    # Height of ROI\n" +
"uint32 width     # Width of ROI\n" +
"\n" +
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n" +
"# ROI in this message. Typically this should be False if the full image\n" +
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n" +
"# used).\n" +
"bool do_rectify\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public Request clone() {
    Request c = new Request();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += camera_info.serializationLength();
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    camera_info.serialize(bb, seq);
  }

  public void deserialize(ByteBuffer bb) {
    camera_info.deserialize(bb);
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof Request))
      return false;
    Request other = (Request) o;
    return
      camera_info.equals(other.camera_info) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.camera_info == null ? 0 : this.camera_info.hashCode());
    return result;
  }
} // class Request

static public class Response extends ros.communication.Message {

  public boolean success;
  public java.lang.String status_message = new java.lang.String();

  public Response() {
  }

  public static java.lang.String __s_getDataType() { return "sensor_msgs/SetCameraInfoResponse"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "2ec6f3eff0161f4257b808b12bc830c2"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getServerMD5Sum() { return "bef1df590ed75ed1f393692395e15482"; }
  public java.lang.String getServerMD5Sum() { return __s_getServerMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "bool success\n" +
"string status_message\n" +
"\n" +
"\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public Response clone() {
    Response c = new Response();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 1; // success
    __l += 4 + status_message.length();
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    bb.put((byte)(success ? 1 : 0));
    Serialization.writeString(bb, status_message);
  }

  public void deserialize(ByteBuffer bb) {
    success = bb.get() != 0 ? true : false;
    status_message = Serialization.readString(bb);
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof Response))
      return false;
    Response other = (Response) o;
    return
      success == other.success &&
      status_message.equals(other.status_message) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.success ? 1231 : 1237);
    result = prime * result + (this.status_message == null ? 0 : this.status_message.hashCode());
    return result;
  }
} // class Response

} //class

